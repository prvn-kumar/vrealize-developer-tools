{
  "Cloud.Ansible:": {
    "prefix": "Cloud.Ansible",
    "body": [
      "  Cloud.Ansible_1:",
      "    type: Cloud.Ansible",
      "    properties:",
      "      id:",
      "      host:",
      "      count:",
      "      groups:",
      "        - ",
      "        string:",
      "      osType:",
      "      account:",
      "      password:",
      "      username:",
      "      playbooks:",
      "        provision:",
      "          - ",
      "          string:",
      "        de-provision:",
      "          - ",
      "          string:",
      "      privateKey:",
      "      inventoryFile:",
      "      authentication:",
      "      privateKeyFile:",
      "      maxConnectionRetries:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Configuration Management"
  },
  "Cloud.AWS.EC2.Instance:": {
    "prefix": "Cloud.AWS.EC2.Instance",
    "body": [
      "  Cloud.AWS.EC2.Instance_1:",
      "    type: Cloud.AWS.EC2.Instance",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      zone:",
      "      count:",
      "      image:",
      "      flavor:",
      "      osType:",
      "      region:",
      "      account:",
      "      address:",
      "      project:",
      "      storage:",
      "        constraints:",
      "          - ",
      "          tag:",
      "        maxDiskCapacityInGB:",
      "        bootDiskCapacityInGB:",
      "      imageRef:",
      "      networks:",
      "        - ",
      "        name:",
      "        address:",
      "        assignment:",
      "        deviceIndex:",
      "        assignPublicIpAddress:",
      "      powerState:",
      "      cloudConfig:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      machineType:",
      "      externalLink:",
      "      remoteAccess:",
      "        sshKey:",
      "        keyPair:",
      "        password:",
      "        username:",
      "        privateKey:",
      "        authentication:",
      "      attachedDisks:",
      "        - ",
      "        source:",
      "      spotDurationInHrs:",
      "      cloudConfigSettings:",
      "        phoneHomeShouldWait:",
      "        phoneHomeFailOnTimeout:",
      "        phoneHomeTimeoutSeconds:",
      "      autoScaleConfiguration:",
      "        policy:",
      "        maxSize:",
      "        minSize:",
      "        desiredCapacity:",
      "        metricScaleRules:",
      "          - ",
      "          action:",
      "            type:",
      "            value:",
      "            cooldown:",
      "          trigger:",
      "            metric:",
      "            period:",
      "            operator:",
      "            statistic:",
      "            threshold:",
      "            evaluationPeriods:",
      "        scheduledScaleRules:",
      "          - ",
      "          maxSize:",
      "          minSize:",
      "          recurrence:",
      "          desiredCapacity:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS"
  },
  "Cloud.AWS.LoadBalancer.Application:": {
    "prefix": "Cloud.AWS.LoadBalancer.Application",
    "body": [
      "  Cloud.AWS.LoadBalancer.Application_1:",
      "    type: Cloud.AWS.LoadBalancer.Application",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      routes:",
      "        - ",
      "        port:",
      "        protocol:",
      "        instancePort:",
      "        instanceProtocol:",
      "        healthCheckConfiguration:",
      "          port:",
      "          urlPath:",
      "          protocol:",
      "          timeoutSeconds:",
      "          intervalSeconds:",
      "          healthyThreshold:",
      "          unhealthyThreshold:",
      "      address:",
      "      network:",
      "      instances:",
      "        - ",
      "        string:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      internetFacing:",
      "      resourceGroupName:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Load Balancers"
  },
  "Cloud.AWS.LoadBalancer.Classic:": {
    "prefix": "Cloud.AWS.LoadBalancer.Classic",
    "body": [
      "  Cloud.AWS.LoadBalancer.Classic_1:",
      "    type: Cloud.AWS.LoadBalancer.Classic",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      routes:",
      "        - ",
      "        port:",
      "        protocol:",
      "        instancePort:",
      "        instanceProtocol:",
      "        healthCheckConfiguration:",
      "          port:",
      "          urlPath:",
      "          protocol:",
      "          timeoutSeconds:",
      "          intervalSeconds:",
      "          healthyThreshold:",
      "          unhealthyThreshold:",
      "      address:",
      "      network:",
      "      instances:",
      "        - ",
      "        string:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      internetFacing:",
      "      resourceGroupName:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Load Balancers"
  },
  "Cloud.AWS.LoadBalancer.Network:": {
    "prefix": "Cloud.AWS.LoadBalancer.Network",
    "body": [
      "  Cloud.AWS.LoadBalancer.Network_1:",
      "    type: Cloud.AWS.LoadBalancer.Network",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      routes:",
      "        - ",
      "        port:",
      "        protocol:",
      "        instancePort:",
      "        instanceProtocol:",
      "        healthCheckConfiguration:",
      "          port:",
      "          urlPath:",
      "          protocol:",
      "          timeoutSeconds:",
      "          intervalSeconds:",
      "          healthyThreshold:",
      "          unhealthyThreshold:",
      "      address:",
      "      network:",
      "      instances:",
      "        - ",
      "        string:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      internetFacing:",
      "      resourceGroupName:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Load Balancers"
  },
  "Cloud.AWS.Volume:": {
    "prefix": "Cloud.AWS.Volume",
    "body": [
      "  Cloud.AWS.Volume_1:",
      "    type: Cloud.AWS.Volume",
      "    properties:",
      "      iops:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      zone:",
      "      count:",
      "      region:",
      "      account:",
      "      encrypted:",
      "      capacityGb:",
      "      persistent:",
      "      volumeType:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      maxDiskCapacityInGB:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS"
  },
  "Cloud.Azure.Disk:": {
    "prefix": "Cloud.Azure.Disk",
    "body": [
      "  Cloud.Azure.Disk_1:",
      "    type: Cloud.Azure.Disk",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      region:",
      "      account:",
      "      encrypted:",
      "      capacityGb:",
      "      persistent:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      diskCaching:",
      "      managedDiskType:",
      "      storageAccountName:",
      "      maxDiskCapacityInGB:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure"
  },
  "Cloud.Azure.Machine:": {
    "prefix": "Cloud.Azure.Machine",
    "body": [
      "  Cloud.Azure.Machine_1:",
      "    type: Cloud.Azure.Machine",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      image:",
      "      flavor:",
      "      osType:",
      "      region:",
      "      account:",
      "      address:",
      "      project:",
      "      storage:",
      "        constraints:",
      "          - ",
      "          tag:",
      "        managedDiskType:",
      "        storageAccountName:",
      "        maxDiskCapacityInGB:",
      "        bootDiskCapacityInGB:",
      "      imageRef:",
      "      networks:",
      "        - ",
      "        name:",
      "        address:",
      "        network:",
      "        assignment:",
      "        deviceIndex:",
      "        assignPublicIpAddress:",
      "      extensions:",
      "        - ",
      "        name:",
      "        type:",
      "        settings:",
      "        publisher:",
      "        protectedSettings:",
      "        typeHandlerVersion:",
      "        autoUpgradeMinorVersion:",
      "      powerState:",
      "      cloudConfig:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      remoteAccess:",
      "        sshKey:",
      "        password:",
      "        username:",
      "        privateKey:",
      "        authentication:",
      "      attachedDisks:",
      "        - ",
      "        source:",
      "      resourceGroupName:",
      "      cloudConfigSettings:",
      "        phoneHomeShouldWait:",
      "        phoneHomeFailOnTimeout:",
      "        phoneHomeTimeoutSeconds:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure"
  },
  "Cloud.Azure.ResourceGroup:": {
    "prefix": "Cloud.Azure.ResourceGroup",
    "body": [
      "  Cloud.Azure.ResourceGroup_1:",
      "    type: Cloud.Azure.ResourceGroup",
      "    properties:",
      "      name:",
      "      count:",
      "      useExisting:",
      "      resourceName:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure"
  },
  "Cloud.GCP.Disk:": {
    "prefix": "Cloud.GCP.Disk",
    "body": [
      "  Cloud.GCP.Disk_1:",
      "    type: Cloud.GCP.Disk",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      zone:",
      "      count:",
      "      region:",
      "      account:",
      "      capacityGb:",
      "      persistent:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      persistentDiskType:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "GCP"
  },
  "Cloud.GCP.Machine:": {
    "prefix": "Cloud.GCP.Machine",
    "body": [
      "  Cloud.GCP.Machine_1:",
      "    type: Cloud.GCP.Machine",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      image:",
      "      flavor:",
      "      imageRef:",
      "      cloudConfig:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      attachedDisks:",
      "        - ",
      "        source:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "GCP"
  },
  "Cloud.K8S.Cluster:": {
    "prefix": "Cloud.K8S.Cluster",
    "body": [
      "  Cloud.K8S.Cluster_1:",
      "    type: Cloud.K8S.Cluster",
      "    properties:",
      "      port:",
      "      count:",
      "      workers:",
      "      hostname:",
      "      connectBy:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Kubernetes"
  },
  "Cloud.K8S.Namespace:": {
    "prefix": "Cloud.K8S.Namespace",
    "body": [
      "  Cloud.K8S.Namespace_1:",
      "    type: Cloud.K8S.Namespace",
      "    properties:",
      "      name:",
      "      count:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      description:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Kubernetes"
  },
  "Cloud.LoadBalancer:": {
    "prefix": "Cloud.LoadBalancer",
    "body": [
      "  Cloud.LoadBalancer_1:",
      "    type: Cloud.LoadBalancer",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      routes:",
      "        - ",
      "        port:",
      "        protocol:",
      "        instancePort:",
      "        instanceProtocol:",
      "        healthCheckConfiguration:",
      "          port:",
      "          urlPath:",
      "          protocol:",
      "          timeoutSeconds:",
      "          intervalSeconds:",
      "          healthyThreshold:",
      "          unhealthyThreshold:",
      "      address:",
      "      network:",
      "      instances:",
      "        - ",
      "        string:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      internetFacing:",
      "      resourceGroupName:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Cloud Agnostic"
  },
  "Cloud.Machine:": {
    "prefix": "Cloud.Machine",
    "body": [
      "  Cloud.Machine_1:",
      "    type: Cloud.Machine",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      zone:",
      "      count:",
      "      image:",
      "      flavor:",
      "      osType:",
      "      region:",
      "      account:",
      "      address:",
      "      project:",
      "      storage:",
      "        constraints:",
      "          - ",
      "          tag:",
      "        maxDiskCapacityInGB:",
      "        bootDiskCapacityInGB:",
      "      imageRef:",
      "      networks:",
      "        - ",
      "        name:",
      "        ports:",
      "        address:",
      "        network:",
      "        assignment:",
      "        deviceIndex:",
      "        securityGroups:",
      "          - ",
      "          string:",
      "        assignPublicIpAddress:",
      "      powerState:",
      "      cloudConfig:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      endpointType:",
      "      externalLink:",
      "      remoteAccess:",
      "        sshKey:",
      "        keyPair:",
      "        password:",
      "        username:",
      "        privateKey:",
      "        authentication:",
      "      attachedDisks:",
      "        - ",
      "        source:",
      "      resourceGroupName:",
      "      cloudConfigSettings:",
      "        phoneHomeShouldWait:",
      "        phoneHomeFailOnTimeout:",
      "        phoneHomeTimeoutSeconds:",
      "      autoScaleConfiguration:",
      "        policy:",
      "        maxSize:",
      "        minSize:",
      "        desiredCapacity:",
      "        metricScaleRules:",
      "          - ",
      "          action:",
      "            type:",
      "            value:",
      "            cooldown:",
      "          trigger:",
      "            metric:",
      "            period:",
      "            operator:",
      "            statistic:",
      "            threshold:",
      "            evaluationPeriods:",
      "        scheduledScaleRules:",
      "          - ",
      "          maxSize:",
      "          minSize:",
      "          recurrence:",
      "          desiredCapacity:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Cloud Agnostic"
  },
  "Cloud.Network:": {
    "prefix": "Cloud.Network",
    "body": [
      "  Cloud.Network_1:",
      "    type: Cloud.Network",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      netmask:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      description:",
      "      networkType:",
      "      prefixLength:",
      "      resourceGroupName:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Cloud Agnostic"
  },
  "Cloud.NSX.LoadBalancer:": {
    "prefix": "Cloud.NSX.LoadBalancer",
    "body": [
      "  Cloud.NSX.LoadBalancer_1:",
      "    type: Cloud.NSX.LoadBalancer",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      routes:",
      "        - ",
      "        port:",
      "        protocol:",
      "        instancePort:",
      "        instanceProtocol:",
      "        healthCheckConfiguration:",
      "          port:",
      "          urlPath:",
      "          protocol:",
      "          timeoutSeconds:",
      "          intervalSeconds:",
      "          healthyThreshold:",
      "          unhealthyThreshold:",
      "      address:",
      "      network:",
      "      instances:",
      "        - ",
      "        string:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      internetFacing:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "NSX"
  },
  "Cloud.NSX.Network:": {
    "prefix": "Cloud.NSX.Network",
    "body": [
      "  Cloud.NSX.Network_1:",
      "    type: Cloud.NSX.Network",
      "    properties:",
      "      dns:",
      "        - ",
      "        string:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      domain:",
      "      gateway:",
      "      netmask:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      description:",
      "      networkCidr:",
      "      networkType:",
      "      prefixLength:",
      "      dnsSearchDomains:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "NSX"
  },
  "Cloud.Puppet:": {
    "prefix": "Cloud.Puppet",
    "body": [
      "  Cloud.Puppet_1:",
      "    type: Cloud.Puppet",
      "    properties:",
      "      id:",
      "      host:",
      "      role:",
      "      count:",
      "      osType:",
      "      account:",
      "      useSudo:",
      "      password:",
      "      username:",
      "      privateKey:",
      "      environment:",
      "      disableHTTPS:",
      "      authentication:",
      "      autoSignSecret:",
      "      agentConfiguration:",
      "        certName:",
      "          - ",
      "          string:",
      "        runInterval:",
      "        puppetAgentAccountUser:",
      "        puppetAgentAccountDomain:",
      "        puppetAgentAccountPassword:",
      "      maxConnectionRetries:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Configuration Management"
  },
  "Cloud.Service.AWS.API.Gateway.Deployment:": {
    "prefix": "Cloud.Service.AWS.API.Gateway.Deployment",
    "body": [
      "  Cloud.Service.AWS.API.Gateway.Deployment_1:",
      "    type: Cloud.Service.AWS.API.Gateway.Deployment",
      "    properties:",
      "      count:",
      "      account:",
      "      variables:",
      "      invoke_url:",
      "      stage_name:",
      "      description:",
      "      rest_api_id:",
      "      created_date:",
      "      execution_arn:",
      "      provider_region:",
      "      stage_description:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.API"
  },
  "Cloud.Service.AWS.API.Gateway.Integration:": {
    "prefix": "Cloud.Service.AWS.API.Gateway.Integration",
    "body": [
      "  Cloud.Service.AWS.API.Gateway.Integration_1:",
      "    type: Cloud.Service.AWS.API.Gateway.Integration",
      "    properties:",
      "      uri:",
      "      type:",
      "      count:",
      "      account:",
      "      credentials:",
      "      http_method:",
      "      resource_id:",
      "      rest_api_id:",
      "      connection_id:",
      "      cache_namespace:",
      "      connection_type:",
      "      provider_region:",
      "      content_handling:",
      "      request_templates:",
      "      request_parameters:",
      "      cache_key_parameters:",
      "        - ",
      "        string:",
      "      passthrough_behavior:",
      "      timeout_milliseconds:",
      "      integration_http_method:",
      "      request_parameters_in_json:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.API"
  },
  "Cloud.Service.AWS.API.Gateway.Method:": {
    "prefix": "Cloud.Service.AWS.API.Gateway.Method",
    "body": [
      "  Cloud.Service.AWS.API.Gateway.Method_1:",
      "    type: Cloud.Service.AWS.API.Gateway.Method",
      "    properties:",
      "      count:",
      "      account:",
      "      http_method:",
      "      resource_id:",
      "      rest_api_id:",
      "      authorization:",
      "      authorizer_id:",
      "      request_models:",
      "      provider_region:",
      "      api_key_required:",
      "      request_parameters:",
      "      authorization_scopes:",
      "        - ",
      "        string:",
      "      request_validator_id:",
      "      request_parameters_in_json:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.API"
  },
  "Cloud.Service.AWS.API.Gateway.Resource:": {
    "prefix": "Cloud.Service.AWS.API.Gateway.Resource",
    "body": [
      "  Cloud.Service.AWS.API.Gateway.Resource_1:",
      "    type: Cloud.Service.AWS.API.Gateway.Resource",
      "    properties:",
      "      path:",
      "      count:",
      "      account:",
      "      parent_id:",
      "      path_part:",
      "      rest_api_id:",
      "      provider_region:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.API"
  },
  "Cloud.Service.AWS.API.Gateway.Rest.API:": {
    "prefix": "Cloud.Service.AWS.API.Gateway.Rest.API",
    "body": [
      "  Cloud.Service.AWS.API.Gateway.Rest.API_1:",
      "    type: Cloud.Service.AWS.API.Gateway.Rest.API",
      "    properties:",
      "      body:",
      "      name:",
      "      count:",
      "      policy:",
      "      account:",
      "      description:",
      "      created_date:",
      "      execution_arn:",
      "      api_key_source:",
      "      provider_region:",
      "      root_resource_id:",
      "      binary_media_types:",
      "        - ",
      "        string:",
      "      endpoint_configuration:",
      "        - ",
      "        types:",
      "          - ",
      "          string:",
      "      minimum_compression_size:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.API"
  },
  "Cloud.Service.AWS.DB.Instance:": {
    "prefix": "Cloud.Service.AWS.DB.Instance",
    "body": [
      "  Cloud.Service.AWS.DB.Instance_1:",
      "    type: Cloud.Service.AWS.DB.Instance",
      "    properties:",
      "      arn:",
      "      iops:",
      "      name:",
      "      port:",
      "      tags:",
      "      count:",
      "      domain:",
      "      engine:",
      "      status:",
      "      account:",
      "      address:",
      "      endpoint:",
      "      multi_az:",
      "      password:",
      "      replicas:",
      "        - ",
      "        string:",
      "      timezone:",
      "      username:",
      "      s3_import:",
      "        - ",
      "        bucket_name:",
      "        bucket_prefix:",
      "        source_engine:",
      "        ingestion_role:",
      "        source_engine_version:",
      "      identifier:",
      "      kms_key_id:",
      "      resource_id:",
      "      storage_type:",
      "      backup_window:",
      "      license_model:",
      "      engine_version:",
      "      hosted_zone_id:",
      "      instance_class:",
      "      provider_region:",
      "      allocated_storage:",
      "      apply_immediately:",
      "      availability_zone:",
      "      identifier_prefix:",
      "      option_group_name:",
      "      storage_encrypted:",
      "      ca_cert_identifier:",
      "      character_set_name:",
      "      maintenance_window:",
      "      deletion_protection:",
      "      monitoring_interval:",
      "      monitoring_role_arn:",
      "      publicly_accessible:",
      "      replicate_source_db:",
      "      skip_final_snapshot:",
      "      snapshot_identifier:",
      "      db_subnet_group_name:",
      "      domain_iam_role_name:",
      "      parameter_group_name:",
      "      security_group_names:",
      "        - ",
      "        string:",
      "      copy_tags_to_snapshot:",
      "      vpc_security_group_ids:",
      "        - ",
      "        string:",
      "      backup_retention_period:",
      "      final_snapshot_identifier:",
      "      auto_minor_version_upgrade:",
      "      allow_major_version_upgrade:",
      "      enabled_cloudwatch_logs_exports:",
      "        - ",
      "        string:",
      "      iam_database_authentication_enabled:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.DB"
  },
  "Cloud.Service.AWS.DB.Parameter.Group:": {
    "prefix": "Cloud.Service.AWS.DB.Parameter.Group",
    "body": [
      "  Cloud.Service.AWS.DB.Parameter.Group_1:",
      "    type: Cloud.Service.AWS.DB.Parameter.Group",
      "    properties:",
      "      arn:",
      "      name:",
      "      tags:",
      "      count:",
      "      family:",
      "      account:",
      "      parameter:",
      "        - ",
      "        name:",
      "        value:",
      "        apply_method:",
      "      description:",
      "      name_prefix:",
      "      provider_region:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.DB"
  },
  "Cloud.Service.AWS.EMR.Cluster:": {
    "prefix": "Cloud.Service.AWS.EMR.Cluster",
    "body": [
      "  Cloud.Service.AWS.EMR.Cluster_1:",
      "    type: Cloud.Service.AWS.EMR.Cluster",
      "    properties:",
      "      id:",
      "      name:",
      "      step:",
      "        - ",
      "        name:",
      "        hadoop_jar_step:",
      "          - ",
      "          jar:",
      "          args:",
      "            - ",
      "            string:",
      "          main_class:",
      "          properties:",
      "        action_on_failure:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      log_uri:",
      "      applications:",
      "        - ",
      "        string:",
      "      service_role:",
      "      cluster_state:",
      "      custom_ami_id:",
      "      release_label:",
      "      configurations:",
      "      ec2_attributes:",
      "        - ",
      "        key_name:",
      "        subnet_id:",
      "        instance_profile:",
      "        service_access_security_group:",
      "        additional_slave_security_groups:",
      "        emr_managed_slave_security_group:",
      "        additional_master_security_groups:",
      "        emr_managed_master_security_group:",
      "      instance_group:",
      "        - ",
      "        name:",
      "        bid_price:",
      "        ebs_config:",
      "          - ",
      "          iops:",
      "          size:",
      "          type:",
      "          volumes_per_instance:",
      "        instance_role:",
      "        instance_type:",
      "        instance_count:",
      "        autoscaling_policy:",
      "      additional_info:",
      "      autoscaling_role:",
      "      bootstrap_action:",
      "        - ",
      "        args:",
      "          - ",
      "          string:",
      "        name:",
      "        path:",
      "      master_public_dns:",
      "      core_instance_type:",
      "      configurations_json:",
      "      core_instance_count:",
      "      kerberos_attributes:",
      "        - ",
      "        realm:",
      "        kdc_admin_password:",
      "        ad_domain_join_user:",
      "        ad_domain_join_password:",
      "        cross_realm_trust_principal_password:",
      "      scale_down_behavior:",
      "      ebs_root_volume_size:",
      "      master_instance_type:",
      "      visible_to_all_users:",
      "      security_configuration:",
      "      termination_protection:",
      "      keep_job_flow_alive_when_no_steps:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.EMR"
  },
  "Cloud.Service.AWS.EMR.Instance.Group:": {
    "prefix": "Cloud.Service.AWS.EMR.Instance.Group",
    "body": [
      "  Cloud.Service.AWS.EMR.Instance.Group_1:",
      "    type: Cloud.Service.AWS.EMR.Instance.Group",
      "    properties:",
      "      name:",
      "      count:",
      "      region:",
      "      status:",
      "      account:",
      "      cluster_id:",
      "      ebs_config:",
      "        - ",
      "        iops:",
      "        size:",
      "        type:",
      "        volumes_per_instance:",
      "      ebs_optimized:",
      "      instance_type:",
      "      instance_count:",
      "      running_instance_count:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.EMR"
  },
  "Cloud.Service.AWS.EMR.Security.Configuration:": {
    "prefix": "Cloud.Service.AWS.EMR.Security.Configuration",
    "body": [
      "  Cloud.Service.AWS.EMR.Security.Configuration_1:",
      "    type: Cloud.Service.AWS.EMR.Security.Configuration",
      "    properties:",
      "      name:",
      "      count:",
      "      region:",
      "      account:",
      "      name_prefix:",
      "      configuration:",
      "      creation_date:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.EMR"
  },
  "Cloud.Service.AWS.IAM.Instance.Profile:": {
    "prefix": "Cloud.Service.AWS.IAM.Instance.Profile",
    "body": [
      "  Cloud.Service.AWS.IAM.Instance.Profile_1:",
      "    type: Cloud.Service.AWS.IAM.Instance.Profile",
      "    properties:",
      "      id:",
      "      arn:",
      "      name:",
      "      path:",
      "      role:",
      "      count:",
      "      roles:",
      "        - ",
      "        string:",
      "      region:",
      "      account:",
      "      unique_id:",
      "      create_date:",
      "      name_prefix:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.IAM"
  },
  "Cloud.Service.AWS.IAM.Role:": {
    "prefix": "Cloud.Service.AWS.IAM.Role",
    "body": [
      "  Cloud.Service.AWS.IAM.Role_1:",
      "    type: Cloud.Service.AWS.IAM.Role",
      "    properties:",
      "      id:",
      "      arn:",
      "      name:",
      "      path:",
      "      count:",
      "      region:",
      "      account:",
      "      unique_id:",
      "      create_date:",
      "      description:",
      "      name_prefix:",
      "      assume_role_policy:",
      "      max_session_duration:",
      "      permissions_boundary:",
      "      force_detach_policies:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.IAM"
  },
  "Cloud.Service.AWS.IAM.Role.Policy:": {
    "prefix": "Cloud.Service.AWS.IAM.Role.Policy",
    "body": [
      "  Cloud.Service.AWS.IAM.Role.Policy_1:",
      "    type: Cloud.Service.AWS.IAM.Role.Policy",
      "    properties:",
      "      name:",
      "      role:",
      "      count:",
      "      policy:",
      "      region:",
      "      account:",
      "      name_prefix:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.IAM"
  },
  "Cloud.Service.AWS.Kinesis.Firehose.Delivery.Stream:": {
    "prefix": "Cloud.Service.AWS.Kinesis.Firehose.Delivery.Stream",
    "body": [
      "  Cloud.Service.AWS.Kinesis.Firehose.Delivery.Stream_1:",
      "    type: Cloud.Service.AWS.Kinesis.Firehose.Delivery.Stream",
      "    properties:",
      "      arn:",
      "      name:",
      "      count:",
      "      region:",
      "      account:",
      "      version_id:",
      "      destination:",
      "      destination_id:",
      "      s3_configuration:",
      "        - ",
      "        prefix:",
      "        role_arn:",
      "        bucket_arn:",
      "        buffer_size:",
      "        kms_key_arn:",
      "        buffer_interval:",
      "        compression_format:",
      "        cloudwatch_logging_options:",
      "          - ",
      "          enabled:",
      "          log_group_name:",
      "          log_stream_name:",
      "      splunk_configuration:",
      "        - ",
      "        hec_token:",
      "        hec_endpoint:",
      "        retry_duration:",
      "        s3_backup_mode:",
      "        hec_endpoint_type:",
      "        processing_configuration:",
      "          - ",
      "          enabled:",
      "          processors:",
      "            - ",
      "            type:",
      "            parameters:",
      "              - ",
      "              parameter_name:",
      "              parameter_value:",
      "        cloudwatch_logging_options:",
      "          - ",
      "          enabled:",
      "          log_group_name:",
      "          log_stream_name:",
      "        hec_acknowledgment_timeout:",
      "      redshift_configuration:",
      "        - ",
      "        password:",
      "        role_arn:",
      "        username:",
      "        copy_options:",
      "        retry_duration:",
      "        s3_backup_mode:",
      "        cluster_jdbcurl:",
      "        data_table_name:",
      "        data_table_columns:",
      "        s3_backup_configuration:",
      "          - ",
      "          prefix:",
      "          role_arn:",
      "          bucket_arn:",
      "          buffer_size:",
      "          kms_key_arn:",
      "          buffer_interval:",
      "          compression_format:",
      "          cloudwatch_logging_options:",
      "            - ",
      "            enabled:",
      "            log_group_name:",
      "            log_stream_name:",
      "        processing_configuration:",
      "          - ",
      "          enabled:",
      "          processors:",
      "            - ",
      "            type:",
      "            parameters:",
      "              - ",
      "              parameter_name:",
      "              parameter_value:",
      "        cloudwatch_logging_options:",
      "          - ",
      "          enabled:",
      "          log_group_name:",
      "          log_stream_name:",
      "      extended_s3_configuration:",
      "        - ",
      "        prefix:",
      "        role_arn:",
      "        bucket_arn:",
      "        buffer_size:",
      "        kms_key_arn:",
      "        s3_backup_mode:",
      "        buffer_interval:",
      "        compression_format:",
      "        s3_backup_configuration:",
      "          - ",
      "          prefix:",
      "          role_arn:",
      "          bucket_arn:",
      "          buffer_size:",
      "          kms_key_arn:",
      "          buffer_interval:",
      "          compression_format:",
      "          cloudwatch_logging_options:",
      "            - ",
      "            enabled:",
      "            log_group_name:",
      "            log_stream_name:",
      "        processing_configuration:",
      "          - ",
      "          enabled:",
      "          processors:",
      "            - ",
      "            type:",
      "            parameters:",
      "              - ",
      "              parameter_name:",
      "              parameter_value:",
      "        cloudwatch_logging_options:",
      "          - ",
      "          enabled:",
      "          log_group_name:",
      "          log_stream_name:",
      "        data_format_conversion_configuration:",
      "          - ",
      "          enabled:",
      "          schema_configuration:",
      "            - ",
      "            region:",
      "            role_arn:",
      "            catalog_id:",
      "            table_name:",
      "            version_id:",
      "            database_name:",
      "          input_format_configuration:",
      "            - ",
      "            deserializer:",
      "              - ",
      "              hive_json_ser_de:",
      "                - ",
      "                timestamp_formats:",
      "                  - ",
      "                  string:",
      "              open_x_json_ser_de:",
      "                - ",
      "                case_insensitive:",
      "                column_to_json_key_mappings:",
      "                convert_dots_in_json_keys_to_underscores:",
      "          output_format_configuration:",
      "            - ",
      "            serializer:",
      "              - ",
      "              orc_ser_de:",
      "                - ",
      "                compression:",
      "                enable_padding:",
      "                format_version:",
      "                block_size_bytes:",
      "                row_index_stride:",
      "                padding_tolerance:",
      "                stripe_size_bytes:",
      "                bloom_filter_columns:",
      "                  - ",
      "                  string:",
      "                dictionary_key_threshold:",
      "                bloom_filter_false_positive_probability:",
      "              parquet_ser_de:",
      "                - ",
      "                compression:",
      "                writer_version:",
      "                page_size_bytes:",
      "                block_size_bytes:",
      "                max_padding_bytes:",
      "                enable_dictionary_compression:",
      "      elasticsearch_configuration:",
      "        - ",
      "        role_arn:",
      "        type_name:",
      "        domain_arn:",
      "        index_name:",
      "        buffering_size:",
      "        retry_duration:",
      "        s3_backup_mode:",
      "        buffering_interval:",
      "        index_rotation_period:",
      "        processing_configuration:",
      "          - ",
      "          enabled:",
      "          processors:",
      "            - ",
      "            type:",
      "            parameters:",
      "              - ",
      "              parameter_name:",
      "              parameter_value:",
      "        cloudwatch_logging_options:",
      "          - ",
      "          enabled:",
      "          log_group_name:",
      "          log_stream_name:",
      "      kinesis_source_configuration:",
      "        - ",
      "        role_arn:",
      "        kinesis_stream_arn:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Kinesis"
  },
  "Cloud.Service.AWS.Kinesis.Stream:": {
    "prefix": "Cloud.Service.AWS.Kinesis.Stream",
    "body": [
      "  Cloud.Service.AWS.Kinesis.Stream_1:",
      "    type: Cloud.Service.AWS.Kinesis.Stream",
      "    properties:",
      "      arn:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      kms_key_id:",
      "      shard_count:",
      "      encryption_type:",
      "      retention_period:",
      "      shard_level_metrics:",
      "        - ",
      "        string:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Kinesis"
  },
  "Cloud.Service.AWS.KMS.Key:": {
    "prefix": "Cloud.Service.AWS.KMS.Key",
    "body": [
      "  Cloud.Service.AWS.KMS.Key_1:",
      "    type: Cloud.Service.AWS.KMS.Key",
      "    properties:",
      "      id:",
      "      arn:",
      "      tags:",
      "      count:",
      "      key_id:",
      "      policy:",
      "      region:",
      "      account:",
      "      key_usage:",
      "      is_enabled:",
      "      description:",
      "      enable_key_rotation:",
      "      deletion_window_in_days:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.KMS"
  },
  "Cloud.Service.AWS.Lambda.Alias:": {
    "prefix": "Cloud.Service.AWS.Lambda.Alias",
    "body": [
      "  Cloud.Service.AWS.Lambda.Alias_1:",
      "    type: Cloud.Service.AWS.Lambda.Alias",
      "    properties:",
      "      arn:",
      "      name:",
      "      count:",
      "      region:",
      "      account:",
      "      description:",
      "      function_name:",
      "      routing_config:",
      "        - ",
      "        additional_version_weights:",
      "      function_version:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Lambda"
  },
  "Cloud.Service.AWS.Lambda.Event.Source.Mapping:": {
    "prefix": "Cloud.Service.AWS.Lambda.Event.Source.Mapping",
    "body": [
      "  Cloud.Service.AWS.Lambda.Event.Source.Mapping_1:",
      "    type: Cloud.Service.AWS.Lambda.Event.Source.Mapping",
      "    properties:",
      "      uuid:",
      "      count:",
      "      state:",
      "      region:",
      "      account:",
      "      enabled:",
      "      batch_size:",
      "      function_arn:",
      "      function_name:",
      "      last_modified:",
      "      event_source_arn:",
      "      starting_position:",
      "      last_processing_result:",
      "      state_transition_reason:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Lambda"
  },
  "Cloud.Service.AWS.Lambda.Function:": {
    "prefix": "Cloud.Service.AWS.Lambda.Function",
    "body": [
      "  Cloud.Service.AWS.Lambda.Function_1:",
      "    type: Cloud.Service.AWS.Lambda.Function",
      "    properties:",
      "      arn:",
      "      role:",
      "      tags:",
      "      count:",
      "      region:",
      "      s3_key:",
      "      account:",
      "      handler:",
      "      publish:",
      "      runtime:",
      "      timeout:",
      "      version:",
      "      filename:",
      "      s3_bucket:",
      "      invoke_arn:",
      "      vpc_config:",
      "        - ",
      "        vpc_id:",
      "        subnet_ids:",
      "          - ",
      "          string:",
      "        security_group_ids:",
      "          - ",
      "          string:",
      "      description:",
      "      environment:",
      "        - ",
      "        variables:",
      "      kms_key_arn:",
      "      memory_size:",
      "      function_name:",
      "      last_modified:",
      "      qualified_arn:",
      "      tracing_config:",
      "        - ",
      "        mode:",
      "      source_code_hash:",
      "      source_code_size:",
      "      s3_object_version:",
      "      dead_letter_config:",
      "        - ",
      "        target_arn:",
      "      reserved_concurrent_executions:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Lambda"
  },
  "Cloud.Service.AWS.Lambda.Permission:": {
    "prefix": "Cloud.Service.AWS.Lambda.Permission",
    "body": [
      "  Cloud.Service.AWS.Lambda.Permission_1:",
      "    type: Cloud.Service.AWS.Lambda.Permission",
      "    properties:",
      "      count:",
      "      action:",
      "      region:",
      "      account:",
      "      principal:",
      "      qualifier:",
      "      source_arn:",
      "      statement_id:",
      "      function_name:",
      "      source_account:",
      "      event_source_token:",
      "      statement_id_prefix:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Lambda"
  },
  "Cloud.Service.AWS.RDS.Cluster:": {
    "prefix": "Cloud.Service.AWS.RDS.Cluster",
    "body": [
      "  Cloud.Service.AWS.RDS.Cluster_1:",
      "    type: Cloud.Service.AWS.RDS.Cluster",
      "    properties:",
      "      id:",
      "      arn:",
      "      port:",
      "      tags:",
      "      count:",
      "      engine:",
      "      region:",
      "      account:",
      "      endpoint:",
      "      iam_roles:",
      "        - ",
      "        string:",
      "      s3_import:",
      "        - ",
      "        bucket_name:",
      "        bucket_prefix:",
      "        source_engine:",
      "        ingestion_role:",
      "        source_engine_version:",
      "      kms_key_id:",
      "      engine_mode:",
      "      database_name:",
      "      source_region:",
      "      engine_version:",
      "      hosted_zone_id:",
      "      cluster_members:",
      "        - ",
      "        string:",
      "      master_password:",
      "      master_username:",
      "      reader_endpoint:",
      "      backtrack_window:",
      "      apply_immediately:",
      "      storage_encrypted:",
      "      availability_zones:",
      "        - ",
      "        string:",
      "      cluster_identifier:",
      "      cluster_resource_id:",
      "      deletion_protection:",
      "      skip_final_snapshot:",
      "      snapshot_identifier:",
      "      db_subnet_group_name:",
      "      scaling_configuration:",
      "        - ",
      "        auto_pause:",
      "        max_capacity:",
      "        min_capacity:",
      "        seconds_until_auto_pause:",
      "      vpc_security_group_ids:",
      "        - ",
      "        string:",
      "      backup_retention_period:",
      "      preferred_backup_window:",
      "      cluster_identifier_prefix:",
      "      final_snapshot_identifier:",
      "      preferred_maintenance_window:",
      "      replication_source_identifier:",
      "      db_cluster_parameter_group_name:",
      "      enabled_cloudwatch_logs_exports:",
      "        - ",
      "        string:",
      "      iam_database_authentication_enabled:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.RDS"
  },
  "Cloud.Service.AWS.RDS.Cluster.Instance:": {
    "prefix": "Cloud.Service.AWS.RDS.Cluster.Instance",
    "body": [
      "  Cloud.Service.AWS.RDS.Cluster.Instance_1:",
      "    type: Cloud.Service.AWS.RDS.Cluster.Instance",
      "    properties:",
      "      id:",
      "      arn:",
      "      port:",
      "      tags:",
      "      count:",
      "      engine:",
      "      region:",
      "      writer:",
      "      account:",
      "      endpoint:",
      "      identifier:",
      "      kms_key_id:",
      "      engine_version:",
      "      instance_class:",
      "      promotion_tier:",
      "      dbi_resource_id:",
      "      apply_immediately:",
      "      availability_zone:",
      "      identifier_prefix:",
      "      storage_encrypted:",
      "      cluster_identifier:",
      "      monitoring_interval:",
      "      monitoring_role_arn:",
      "      publicly_accessible:",
      "      db_subnet_group_name:",
      "      db_parameter_group_name:",
      "      preferred_backup_window:",
      "      auto_minor_version_upgrade:",
      "      performance_insights_enabled:",
      "      preferred_maintenance_window:",
      "      performance_insights_kms_key_id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.RDS"
  },
  "Cloud.Service.AWS.RDS.Cluster.Parameter.Group:": {
    "prefix": "Cloud.Service.AWS.RDS.Cluster.Parameter.Group",
    "body": [
      "  Cloud.Service.AWS.RDS.Cluster.Parameter.Group_1:",
      "    type: Cloud.Service.AWS.RDS.Cluster.Parameter.Group",
      "    properties:",
      "      arn:",
      "      name:",
      "      tags:",
      "      count:",
      "      family:",
      "      region:",
      "      account:",
      "      parameter:",
      "        - ",
      "        name:",
      "        value:",
      "        apply_method:",
      "      description:",
      "      name_prefix:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.RDS"
  },
  "Cloud.Service.AWS.Redshift.Cluster:": {
    "prefix": "Cloud.Service.AWS.Redshift.Cluster",
    "body": [
      "  Cloud.Service.AWS.Redshift.Cluster_1:",
      "    type: Cloud.Service.AWS.Redshift.Cluster",
      "    properties:",
      "      port:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      logging:",
      "        - ",
      "        enable:",
      "        bucket_name:",
      "        s3_key_prefix:",
      "      dns_name:",
      "      endpoint:",
      "      encrypted:",
      "      iam_roles:",
      "        - ",
      "        string:",
      "      node_type:",
      "      elastic_ip:",
      "      kms_key_id:",
      "      bucket_name:",
      "      cluster_type:",
      "      database_name:",
      "      owner_account:",
      "      s3_key_prefix:",
      "      snapshot_copy:",
      "        - ",
      "        grant_name:",
      "        retention_period:",
      "        destination_region:",
      "      enable_logging:",
      "      cluster_version:",
      "      master_password:",
      "      master_username:",
      "      number_of_nodes:",
      "      availability_zone:",
      "      cluster_identifier:",
      "      cluster_public_key:",
      "      publicly_accessible:",
      "      skip_final_snapshot:",
      "      snapshot_identifier:",
      "      enhanced_vpc_routing:",
      "      allow_version_upgrade:",
      "      vpc_security_group_ids:",
      "        - ",
      "        string:",
      "      cluster_revision_number:",
      "      cluster_security_groups:",
      "        - ",
      "        string:",
      "      cluster_subnet_group_name:",
      "      final_snapshot_identifier:",
      "      snapshot_cluster_identifier:",
      "      cluster_parameter_group_name:",
      "      preferred_maintenance_window:",
      "      automated_snapshot_retention_period:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Redshift"
  },
  "Cloud.Service.AWS.Redshift.Parameter.Group:": {
    "prefix": "Cloud.Service.AWS.Redshift.Parameter.Group",
    "body": [
      "  Cloud.Service.AWS.Redshift.Parameter.Group_1:",
      "    type: Cloud.Service.AWS.Redshift.Parameter.Group",
      "    properties:",
      "      name:",
      "      count:",
      "      family:",
      "      region:",
      "      account:",
      "      parameter:",
      "        - ",
      "        name:",
      "        value:",
      "      description:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Redshift"
  },
  "Cloud.Service.AWS.Redshift.Subnet.Group:": {
    "prefix": "Cloud.Service.AWS.Redshift.Subnet.Group",
    "body": [
      "  Cloud.Service.AWS.Redshift.Subnet.Group_1:",
      "    type: Cloud.Service.AWS.Redshift.Subnet.Group",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      subnet_ids:",
      "        - ",
      "        string:",
      "      description:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Redshift"
  },
  "Cloud.Service.AWS.Route53.Record:": {
    "prefix": "Cloud.Service.AWS.Route53.Record",
    "body": [
      "  Cloud.Service.AWS.Route53.Record_1:",
      "    type: Cloud.Service.AWS.Route53.Record",
      "    properties:",
      "      ttl:",
      "      fqdn:",
      "      name:",
      "      type:",
      "      alias:",
      "        - ",
      "        name:",
      "        zone_id:",
      "        evaluate_target_health:",
      "      count:",
      "      region:",
      "      weight:",
      "      account:",
      "      records:",
      "        - ",
      "        string:",
      "      zone_id:",
      "      failover:",
      "      set_identifier:",
      "      allow_overwrite:",
      "      health_check_id:",
      "      latency_routing_policy:",
      "        - ",
      "        region:",
      "      failover_routing_policy:",
      "        - ",
      "        type:",
      "      weighted_routing_policy:",
      "        - ",
      "        weight:",
      "      geolocation_routing_policy:",
      "        - ",
      "        country:",
      "        continent:",
      "        subdivision:",
      "      multivalue_answer_routing_policy:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Route53"
  },
  "Cloud.Service.AWS.Route53.Zone:": {
    "prefix": "Cloud.Service.AWS.Route53.Zone",
    "body": [
      "  Cloud.Service.AWS.Route53.Zone_1:",
      "    type: Cloud.Service.AWS.Route53.Zone",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      vpc_id:",
      "      account:",
      "      comment:",
      "      zone_id:",
      "      vpc_region:",
      "      name_servers:",
      "        - ",
      "        string:",
      "      force_destroy:",
      "      delegation_set_id:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.Route53"
  },
  "Cloud.Service.AWS.S3.Bucket:": {
    "prefix": "Cloud.Service.AWS.S3.Bucket",
    "body": [
      "  Cloud.Service.AWS.S3.Bucket_1:",
      "    type: Cloud.Service.AWS.S3.Bucket",
      "    properties:",
      "      id:",
      "      acl:",
      "      arn:",
      "      tags:",
      "      count:",
      "      bucket:",
      "      policy:",
      "      region:",
      "      account:",
      "      logging:",
      "        - ",
      "        target_bucket:",
      "        target_prefix:",
      "      website:",
      "        - ",
      "        routing_rules:",
      "        error_document:",
      "        index_document:",
      "        redirect_all_requests_to:",
      "      cors_rule:",
      "        - ",
      "        expose_headers:",
      "          - ",
      "          string:",
      "        allowed_headers:",
      "          - ",
      "          string:",
      "        allowed_methods:",
      "          - ",
      "          string:",
      "        allowed_origins:",
      "          - ",
      "          string:",
      "        max_age_seconds:",
      "      versioning:",
      "        - ",
      "        enabled:",
      "        mfa_delete:",
      "      bucket_prefix:",
      "      force_destroy:",
      "      request_payer:",
      "      hosted_zone_id:",
      "      lifecycle_rule:",
      "        - ",
      "        id:",
      "        tags:",
      "        prefix:",
      "        enabled:",
      "        expiration:",
      "          - ",
      "          date:",
      "          days:",
      "          expired_object_delete_marker:",
      "        transition:",
      "          - ",
      "          date:",
      "          days:",
      "          storage_class:",
      "        noncurrent_version_expiration:",
      "          - ",
      "          days:",
      "        noncurrent_version_transition:",
      "          - ",
      "          days:",
      "          storage_class:",
      "        abort_incomplete_multipart_upload_days:",
      "      website_domain:",
      "      website_endpoint:",
      "      bucket_domain_name:",
      "      acceleration_status:",
      "      replication_configuration:",
      "        - ",
      "        role:",
      "        rules:",
      "          - ",
      "          id:",
      "          prefix:",
      "          status:",
      "          destination:",
      "            - ",
      "            bucket:",
      "            storage_class:",
      "            replica_kms_key_id:",
      "          source_selection_criteria:",
      "            - ",
      "            sse_kms_encrypted_objects:",
      "              - ",
      "              enabled:",
      "      bucket_regional_domain_name:",
      "      server_side_encryption_configuration:",
      "        - ",
      "        rule:",
      "          - ",
      "          apply_server_side_encryption_by_default:",
      "            - ",
      "            sse_algorithm:",
      "            kms_master_key_id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.S3"
  },
  "Cloud.Service.AWS.S3.Bucket.Notification:": {
    "prefix": "Cloud.Service.AWS.S3.Bucket.Notification",
    "body": [
      "  Cloud.Service.AWS.S3.Bucket.Notification_1:",
      "    type: Cloud.Service.AWS.S3.Bucket.Notification",
      "    properties:",
      "      count:",
      "      queue:",
      "        - ",
      "        id:",
      "        events:",
      "          - ",
      "          string:",
      "        queue_arn:",
      "        filter_prefix:",
      "        filter_suffix:",
      "      topic:",
      "        - ",
      "        id:",
      "        events:",
      "          - ",
      "          string:",
      "        topic_arn:",
      "        filter_prefix:",
      "        filter_suffix:",
      "      bucket:",
      "      region:",
      "      account:",
      "      lambda_function:",
      "        - ",
      "        id:",
      "        events:",
      "          - ",
      "          string:",
      "        filter_prefix:",
      "        filter_suffix:",
      "        lambda_function_arn:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.S3"
  },
  "Cloud.Service.AWS.S3.Bucket.Object:": {
    "prefix": "Cloud.Service.AWS.S3.Bucket.Object",
    "body": [
      "  Cloud.Service.AWS.S3.Bucket.Object_1:",
      "    type: Cloud.Service.AWS.S3.Bucket.Object",
      "    properties:",
      "      id:",
      "      acl:",
      "      key:",
      "      etag:",
      "      tags:",
      "      count:",
      "      bucket:",
      "      region:",
      "      source:",
      "      account:",
      "      content:",
      "      kms_key_id:",
      "      version_id:",
      "      content_type:",
      "      cache_control:",
      "      storage_class:",
      "      content_base64:",
      "      content_encoding:",
      "      content_language:",
      "      website_redirect:",
      "      content_disposition:",
      "      server_side_encryption:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.S3"
  },
  "Cloud.Service.AWS.S3.Bucket.Policy:": {
    "prefix": "Cloud.Service.AWS.S3.Bucket.Policy",
    "body": [
      "  Cloud.Service.AWS.S3.Bucket.Policy_1:",
      "    type: Cloud.Service.AWS.S3.Bucket.Policy",
      "    properties:",
      "      id:",
      "      count:",
      "      bucket:",
      "      policy:",
      "      region:",
      "      account:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "AWS.S3"
  },
  "Cloud.Service.Azure.App.Service:": {
    "prefix": "Cloud.Service.Azure.App.Service",
    "body": [
      "  Cloud.Service.Azure.App.Service_1:",
      "    type: Cloud.Service.Azure.App.Service",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      enabled:",
      "      identity:",
      "        - ",
      "        type:",
      "        tenant_id:",
      "        principal_id:",
      "      https_only:",
      "      site_config:",
      "        - ",
      "        scm_type:",
      "        always_on:",
      "        ftps_state:",
      "        php_version:",
      "        java_version:",
      "        http2_enabled:",
      "        ip_restriction:",
      "          - ",
      "          ip_address:",
      "          subnet_mask:",
      "        java_container:",
      "        python_version:",
      "        min_tls_version:",
      "        linux_fx_version:",
      "        default_documents:",
      "          - ",
      "          string:",
      "        websockets_enabled:",
      "        local_mysql_enabled:",
      "        virtual_network_name:",
      "        managed_pipeline_mode:",
      "        java_container_version:",
      "        dotnet_framework_version:",
      "        remote_debugging_enabled:",
      "        remote_debugging_version:",
      "        use_32_bit_worker_process:",
      "      app_settings:",
      "      source_control:",
      "        - ",
      "        branch:",
      "        repo_url:",
      "      site_credential:",
      "        - ",
      "        password:",
      "        username:",
      "      connection_string:",
      "        - ",
      "        name:",
      "        type:",
      "        value:",
      "      app_service_plan_id:",
      "      resource_group_name:",
      "      default_site_hostname:",
      "      outbound_ip_addresses:",
      "      client_affinity_enabled:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.App"
  },
  "Cloud.Service.Azure.App.Service.Plan:": {
    "prefix": "Cloud.Service.Azure.App.Service.Plan",
    "body": [
      "  Cloud.Service.Azure.App.Service.Plan_1:",
      "    type: Cloud.Service.Azure.App.Service.Plan",
      "    properties:",
      "      sku:",
      "        - ",
      "        size:",
      "        tier:",
      "        capacity:",
      "      kind:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      properties:",
      "        - ",
      "        reserved:",
      "        per_site_scaling:",
      "        app_service_environment_id:",
      "      resource_group_name:",
      "      maximum_number_of_workers:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.App"
  },
  "Cloud.Service.Azure.App.Service.Slot:": {
    "prefix": "Cloud.Service.Azure.App.Service.Slot",
    "body": [
      "  Cloud.Service.Azure.App.Service.Slot_1:",
      "    type: Cloud.Service.Azure.App.Service.Slot",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      enabled:",
      "      identity:",
      "        - ",
      "        type:",
      "        tenant_id:",
      "        principal_id:",
      "      https_only:",
      "      site_config:",
      "        - ",
      "        scm_type:",
      "        always_on:",
      "        ftps_state:",
      "        php_version:",
      "        java_version:",
      "        http2_enabled:",
      "        ip_restriction:",
      "          - ",
      "          ip_address:",
      "          subnet_mask:",
      "        java_container:",
      "        python_version:",
      "        min_tls_version:",
      "        linux_fx_version:",
      "        default_documents:",
      "          - ",
      "          string:",
      "        websockets_enabled:",
      "        local_mysql_enabled:",
      "        virtual_network_name:",
      "        managed_pipeline_mode:",
      "        java_container_version:",
      "        dotnet_framework_version:",
      "        remote_debugging_enabled:",
      "        remote_debugging_version:",
      "        use_32_bit_worker_process:",
      "      app_settings:",
      "      app_service_name:",
      "      connection_string:",
      "        - ",
      "        name:",
      "        type:",
      "        value:",
      "      app_service_plan_id:",
      "      resource_group_name:",
      "      default_site_hostname:",
      "      client_affinity_enabled:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.App"
  },
  "Cloud.Service.Azure.DNS.AAAA.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.AAAA.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.AAAA.Record_1:",
      "    type: Cloud.Service.Azure.DNS.AAAA.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      account:",
      "      records:",
      "        - ",
      "        string:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.A.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.A.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.A.Record_1:",
      "    type: Cloud.Service.Azure.DNS.A.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      account:",
      "      records:",
      "        - ",
      "        string:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.CAA.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.CAA.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.CAA.Record_1:",
      "    type: Cloud.Service.Azure.DNS.CAA.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      record:",
      "        - ",
      "        tag:",
      "        flags:",
      "        value:",
      "      account:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.CNAME.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.CNAME.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.CNAME.Record_1:",
      "    type: Cloud.Service.Azure.DNS.CNAME.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      record:",
      "      account:",
      "      records:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.MX.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.MX.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.MX.Record_1:",
      "    type: Cloud.Service.Azure.DNS.MX.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      record:",
      "        - ",
      "        exchange:",
      "        preference:",
      "      account:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.NS.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.NS.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.NS.Record_1:",
      "    type: Cloud.Service.Azure.DNS.NS.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      record:",
      "        - ",
      "        nsdname:",
      "      account:",
      "      records:",
      "        - ",
      "        string:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.PTR.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.PTR.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.PTR.Record_1:",
      "    type: Cloud.Service.Azure.DNS.PTR.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      account:",
      "      records:",
      "        - ",
      "        string:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.SRV.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.SRV.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.SRV.Record_1:",
      "    type: Cloud.Service.Azure.DNS.SRV.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      record:",
      "        - ",
      "        port:",
      "        target:",
      "        weight:",
      "        priority:",
      "      account:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.TXT.Record:": {
    "prefix": "Cloud.Service.Azure.DNS.TXT.Record",
    "body": [
      "  Cloud.Service.Azure.DNS.TXT.Record_1:",
      "    type: Cloud.Service.Azure.DNS.TXT.Record",
      "    properties:",
      "      ttl:",
      "      name:",
      "      tags:",
      "      count:",
      "      record:",
      "        - ",
      "        value:",
      "      account:",
      "      zone_name:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.DNS.Zone:": {
    "prefix": "Cloud.Service.Azure.DNS.Zone",
    "body": [
      "  Cloud.Service.Azure.DNS.Zone_1:",
      "    type: Cloud.Service.Azure.DNS.Zone",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      account:",
      "      zone_type:",
      "      name_servers:",
      "        - ",
      "        string:",
      "      resource_group_name:",
      "      number_of_record_sets:",
      "      max_number_of_record_sets:",
      "      resolution_virtual_network_ids:",
      "        - ",
      "        string:",
      "      registration_virtual_network_ids:",
      "        - ",
      "        string:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.DNS"
  },
  "Cloud.Service.Azure.Function.App:": {
    "prefix": "Cloud.Service.Azure.Function.App",
    "body": [
      "  Cloud.Service.Azure.Function.App_1:",
      "    type: Cloud.Service.Azure.Function.App",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      enabled:",
      "      version:",
      "      identity:",
      "        - ",
      "        type:",
      "        tenant_id:",
      "        principal_id:",
      "      https_only:",
      "      site_config:",
      "        - ",
      "        always_on:",
      "        websockets_enabled:",
      "        use_32_bit_worker_process:",
      "      app_settings:",
      "      site_credential:",
      "        - ",
      "        password:",
      "        username:",
      "      default_hostname:",
      "      connection_string:",
      "        - ",
      "        name:",
      "        type:",
      "        value:",
      "      app_service_plan_id:",
      "      resource_group_name:",
      "      outbound_ip_addresses:",
      "      client_affinity_enabled:",
      "      storage_connection_string:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Function"
  },
  "Cloud.Service.Azure.Key.Vault:": {
    "prefix": "Cloud.Service.Azure.Key.Vault",
    "body": [
      "  Cloud.Service.Azure.Key.Vault_1:",
      "    type: Cloud.Service.Azure.Key.Vault",
      "    properties:",
      "      sku:",
      "        - ",
      "        name:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      tenant_id:",
      "      vault_uri:",
      "      network_acls:",
      "        - ",
      "        bypass:",
      "        ip_rules:",
      "          - ",
      "          string:",
      "        default_action:",
      "        virtual_network_subnet_ids:",
      "          - ",
      "          string:",
      "      access_policy:",
      "        - ",
      "        object_id:",
      "        tenant_id:",
      "        application_id:",
      "        key_permissions:",
      "          - ",
      "          string:",
      "        secret_permissions:",
      "          - ",
      "          string:",
      "        certificate_permissions:",
      "          - ",
      "          string:",
      "      resource_group_name:",
      "      enabled_for_deployment:",
      "      enabled_for_disk_encryption:",
      "      enabled_for_template_deployment:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Key"
  },
  "Cloud.Service.Azure.Key.Vault.Access.Policy:": {
    "prefix": "Cloud.Service.Azure.Key.Vault.Access.Policy",
    "body": [
      "  Cloud.Service.Azure.Key.Vault.Access.Policy_1:",
      "    type: Cloud.Service.Azure.Key.Vault.Access.Policy",
      "    properties:",
      "      count:",
      "      account:",
      "      object_id:",
      "      tenant_id:",
      "      vault_name:",
      "      application_id:",
      "      key_permissions:",
      "        - ",
      "        string:",
      "      secret_permissions:",
      "        - ",
      "        string:",
      "      resource_group_name:",
      "      certificate_permissions:",
      "        - ",
      "        string:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Key"
  },
  "Cloud.Service.Azure.Key.Vault.Key:": {
    "prefix": "Cloud.Service.Azure.Key.Vault.Key",
    "body": [
      "  Cloud.Service.Azure.Key.Vault.Key_1:",
      "    type: Cloud.Service.Azure.Key.Vault.Key",
      "    properties:",
      "      e:",
      "      n:",
      "      name:",
      "      tags:",
      "      count:",
      "      account:",
      "      version:",
      "      key_opts:",
      "        - ",
      "        string:",
      "      key_size:",
      "      key_type:",
      "      vault_uri:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Key"
  },
  "Cloud.Service.Azure.Key.Vault.Secret:": {
    "prefix": "Cloud.Service.Azure.Key.Vault.Secret",
    "body": [
      "  Cloud.Service.Azure.Key.Vault.Secret_1:",
      "    type: Cloud.Service.Azure.Key.Vault.Secret",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      value:",
      "      account:",
      "      version:",
      "      vault_uri:",
      "      content_type:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Key"
  },
  "Cloud.Service.Azure.Redis.Cache:": {
    "prefix": "Cloud.Service.Azure.Redis.Cache",
    "body": [
      "  Cloud.Service.Azure.Redis.Cache_1:",
      "    type: Cloud.Service.Azure.Redis.Cache",
      "    properties:",
      "      name:",
      "      port:",
      "      tags:",
      "      count:",
      "      family:",
      "      region:",
      "      account:",
      "      capacity:",
      "      hostname:",
      "      sku_name:",
      "      ssl_port:",
      "      subnet_id:",
      "      shard_count:",
      "      patch_schedule:",
      "        - ",
      "        day_of_week:",
      "        start_hour_utc:",
      "      primary_access_key:",
      "      enable_non_ssl_port:",
      "      redis_configuration:",
      "        - ",
      "        maxclients:",
      "        maxmemory_delta:",
      "        maxmemory_policy:",
      "        maxmemory_reserved:",
      "        rdb_backup_enabled:",
      "        rdb_backup_frequency:",
      "        notify_keyspace_events:",
      "        rdb_backup_max_snapshot_count:",
      "        rdb_storage_connection_string:",
      "      resource_group_name:",
      "      secondary_access_key:",
      "      private_static_ip_address:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Redis"
  },
  "Cloud.Service.Azure.Search.Service:": {
    "prefix": "Cloud.Service.Azure.Search.Service",
    "body": [
      "  Cloud.Service.Azure.Search.Service_1:",
      "    type: Cloud.Service.Azure.Search.Service",
      "    properties:",
      "      sku:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      replica_count:",
      "      partition_count:",
      "      resource_group_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Search"
  },
  "Cloud.Service.Azure.SQL.Database:": {
    "prefix": "Cloud.Service.Azure.SQL.Database",
    "body": [
      "  Cloud.Service.Azure.SQL.Database_1:",
      "    type: Cloud.Service.Azure.SQL.Database",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      import:",
      "        - ",
      "        storage_key:",
      "        storage_uri:",
      "        operation_mode:",
      "        storage_key_type:",
      "        administrator_login:",
      "        authentication_type:",
      "        administrator_login_password:",
      "      region:",
      "      account:",
      "      edition:",
      "      collation:",
      "      encryption:",
      "      create_mode:",
      "      server_name:",
      "      creation_date:",
      "      max_size_bytes:",
      "      elastic_pool_name:",
      "      source_database_id:",
      "      resource_group_name:",
      "      restore_point_in_time:",
      "      threat_detection_policy:",
      "        - ",
      "        state:",
      "        retention_days:",
      "        disabled_alerts:",
      "          - ",
      "          string:",
      "        email_addresses:",
      "          - ",
      "          string:",
      "        storage_endpoint:",
      "        use_server_default:",
      "        email_account_admins:",
      "        storage_account_access_key:",
      "      default_secondary_location:",
      "      source_database_deletion_date:",
      "      requested_service_objective_id:",
      "      requested_service_objective_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.SQL"
  },
  "Cloud.Service.Azure.SQL.Server:": {
    "prefix": "Cloud.Service.Azure.SQL.Server",
    "body": [
      "  Cloud.Service.Azure.SQL.Server_1:",
      "    type: Cloud.Service.Azure.SQL.Server",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      version:",
      "      administrator_login:",
      "      resource_group_name:",
      "      fully_qualified_domain_name:",
      "      administrator_login_password:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.SQL"
  },
  "Cloud.Service.Azure.Storage.Account:": {
    "prefix": "Cloud.Service.Azure.Storage.Account",
    "body": [
      "  Cloud.Service.Azure.Storage.Account_1:",
      "    type: Cloud.Service.Azure.Storage.Account",
      "    properties:",
      "      name:",
      "      tags:",
      "      count:",
      "      region:",
      "      account:",
      "      identity:",
      "        - ",
      "        type:",
      "        tenant_id:",
      "        principal_id:",
      "      access_tier:",
      "      account_kind:",
      "      account_tier:",
      "      account_type:",
      "      custom_domain:",
      "        - ",
      "        name:",
      "        use_subdomain:",
      "      network_rules:",
      "        - ",
      "        bypass:",
      "          - ",
      "          string:",
      "        ip_rules:",
      "          - ",
      "          string:",
      "        virtual_network_subnet_ids:",
      "          - ",
      "          string:",
      "      primary_location:",
      "      primary_access_key:",
      "      secondary_location:",
      "      resource_group_name:",
      "      secondary_access_key:",
      "      primary_blob_endpoint:",
      "      primary_file_endpoint:",
      "      enable_blob_encryption:",
      "      enable_file_encryption:",
      "      primary_queue_endpoint:",
      "      primary_table_endpoint:",
      "      secondary_blob_endpoint:",
      "      account_replication_type:",
      "      secondary_queue_endpoint:",
      "      secondary_table_endpoint:",
      "      account_encryption_source:",
      "      enable_https_traffic_only:",
      "      primary_connection_string:",
      "      secondary_connection_string:",
      "      primary_blob_connection_string:",
      "      secondary_blob_connection_string:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Storage"
  },
  "Cloud.Service.Azure.Storage.Blob:": {
    "prefix": "Cloud.Service.Azure.Storage.Blob",
    "body": [
      "  Cloud.Service.Azure.Storage.Blob_1:",
      "    type: Cloud.Service.Azure.Storage.Blob",
      "    properties:",
      "      url:",
      "      name:",
      "      size:",
      "      type:",
      "      count:",
      "      source:",
      "      account:",
      "      attempts:",
      "      source_uri:",
      "      parallelism:",
      "      content_type:",
      "      resource_group_name:",
      "      storage_account_name:",
      "      storage_container_name:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Storage"
  },
  "Cloud.Service.Azure.Storage.Container:": {
    "prefix": "Cloud.Service.Azure.Storage.Container",
    "body": [
      "  Cloud.Service.Azure.Storage.Container_1:",
      "    type: Cloud.Service.Azure.Storage.Container",
      "    properties:",
      "      name:",
      "      count:",
      "      account:",
      "      properties:",
      "      resource_group_name:",
      "      storage_account_name:",
      "      container_access_type:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Storage"
  },
  "Cloud.Service.Azure.Traffic.Manager.Endpoint:": {
    "prefix": "Cloud.Service.Azure.Traffic.Manager.Endpoint",
    "body": [
      "  Cloud.Service.Azure.Traffic.Manager.Endpoint_1:",
      "    type: Cloud.Service.Azure.Traffic.Manager.Endpoint",
      "    properties:",
      "      name:",
      "      type:",
      "      count:",
      "      target:",
      "      weight:",
      "      account:",
      "      priority:",
      "      geo_mappings:",
      "        - ",
      "        string:",
      "      profile_name:",
      "      endpoint_status:",
      "      endpoint_location:",
      "      target_resource_id:",
      "      min_child_endpoints:",
      "      resource_group_name:",
      "      endpoint_monitor_status:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Traffic"
  },
  "Cloud.Service.Azure.Traffic.Manager.Profile:": {
    "prefix": "Cloud.Service.Azure.Traffic.Manager.Profile",
    "body": [
      "  Cloud.Service.Azure.Traffic.Manager.Profile_1:",
      "    type: Cloud.Service.Azure.Traffic.Manager.Profile",
      "    properties:",
      "      fqdn:",
      "      name:",
      "      tags:",
      "      count:",
      "      account:",
      "      dns_config:",
      "        - ",
      "        ttl:",
      "        relative_name:",
      "      monitor_config:",
      "        - ",
      "        path:",
      "        port:",
      "        protocol:",
      "      profile_status:",
      "      resource_group_name:",
      "      traffic_routing_method:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Microsoft Azure.Traffic"
  },
  "Cloud.Volume:": {
    "prefix": "Cloud.Volume",
    "body": [
      "  Cloud.Volume_1:",
      "    type: Cloud.Volume",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      zone:",
      "      count:",
      "      region:",
      "      account:",
      "      encrypted:",
      "      capacityGb:",
      "      persistent:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      resourceGroupName:",
      "      maxDiskCapacityInGB:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "Cloud Agnostic"
  },
  "Cloud.vSphere.Disk:": {
    "prefix": "Cloud.vSphere.Disk",
    "body": [
      "  Cloud.vSphere.Disk_1:",
      "    type: Cloud.vSphere.Disk",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      region:",
      "      account:",
      "      dataStore:",
      "      encrypted:",
      "      capacityGb:",
      "      persistent:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      storagePolicy:",
      "      provisioningType:",
      "      maxDiskCapacityInGB:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "vSphere"
  },
  "Cloud.vSphere.Machine:": {
    "prefix": "Cloud.vSphere.Machine",
    "body": [
      "  Cloud.vSphere.Machine_1:",
      "    type: Cloud.vSphere.Machine",
      "    properties:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      image:",
      "      flavor:",
      "      osType:",
      "      region:",
      "      account:",
      "      address:",
      "      project:",
      "      storage:",
      "        constraints:",
      "          - ",
      "          tag:",
      "        maxDiskCapacityInGB:",
      "        bootDiskCapacityInGB:",
      "      cpuCount:",
      "      imageRef:",
      "      networks:",
      "        - ",
      "        name:",
      "        address:",
      "        network:",
      "        assignment:",
      "        deviceIndex:",
      "        assignPublicIpAddress:",
      "      folderName:",
      "      powerState:",
      "      cloudConfig:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      remoteAccess:",
      "        sshKey:",
      "        password:",
      "        username:",
      "        privateKey:",
      "        authentication:",
      "      attachedDisks:",
      "        - ",
      "        source:",
      "      ovfProperties:",
      "        - ",
      "        key:",
      "        value:",
      "      snapshotLimit:",
      "      totalMemoryMB:",
      "      groupPlacement:",
      "      customizationSpec:",
      "      cloudConfigSettings:",
      "        phoneHomeShouldWait:",
      "        phoneHomeFailOnTimeout:",
      "        phoneHomeTimeoutSeconds:",
      "      checkImageSSLCertificate:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "vSphere"
  },
  "Cloud.vSphere.Network:": {
    "prefix": "Cloud.vSphere.Network",
    "body": [
      "  Cloud.vSphere.Network_1:",
      "    type: Cloud.vSphere.Network",
      "    properties:",
      "      dns:",
      "        - ",
      "        string:",
      "      name:",
      "      tags:",
      "        - ",
      "        key:",
      "        value:",
      "      count:",
      "      domain:",
      "      gateway:",
      "      netmask:",
      "      constraints:",
      "        - ",
      "        tag:",
      "      description:",
      "      networkCidr:",
      "      networkType:",
      "      prefixLength:",
      "      dnsSearchDomains:",
      "      id:",
      "  #TYPE 'OPTIONAL' TO FIND OPTIONAL PROPERTIES FOR YOUR RESOURCE.",
      "  ${0}"
    ],
    "description": "vSphere"
  }
}
